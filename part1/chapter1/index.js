//  第一章 字符组

/**
 * 元字符 与 转义
 *
 * [、]、^、$、- 都是元字符，在匹配中，它们有着特殊的意义。
 * “-”如果它紧邻着开方括号“[”，那么它就是普通字符。
 *
 * 取消特殊含义的做法是转义，在正则表达式中的元字符前加上反斜线“\”.
*/

/**
 * 排除型字符组
 *
 * 在方括号“[···]”中列出希望匹配的所有字符，這种字符组可以叫做“普通字符组”。
 *
 * 排除型字符组，非常类似普通字符组“[···]”，只是开方括号“[”之后紧跟一个脱字符“^”，写作“[^···]”，表示“在当前位置，匹配一个没有列出的字符”。
 *
 * *** 排除型字符组必须匹配一个字符。
 *
 * 在排除型字符组中，如果需要表示横线字符“-”（而不是用于“'-'范围表示法”），那么“-”应该紧跟在“^”(脱字符)之后。
 * 在普通字符组中，作为普通字符的横线“-”应该紧跟在开方括号“[”之后.
*/

/**
 * 字符组简记法
 *
 * \d === [0-9]            “d” 代表“数字（digit）”
 * \w === [0-9a-zA-Z_]      “w” 代表“单词字符（word）”，包含数字字符和下划线“_”
 * \s === [ \t\r\n\v\f] (第一个字符为空格)    “s” 表示“空白字符（space）”
 *
 * 对应\d、\w、\s 排除型字符组的简记法：
 * \D       \d能匹配的字符，\D一定不能匹配
 * \W       \w能匹配的字符，\W一定不能匹配
 * \S       \s能匹配的字符，\S一定不能匹配
 *
 * 制表符 \t
 * 回车符 \r
 * 换行符 \n
 *
 *
 * ***
 *  a、如果字符组中出现了字符组简记法，最好不要出现单独的“-”，否则可能引起错误。
 *  b、\d、\s、\w 的匹配规则都是针对ASCII编码，也叫 “ASCII 匹配规则”。
 *  c、不同的语言可能有一些专属的独特的字符组简记法。
*/

const regD = /^\d$/
const regW = /^\w$/
const regS = /^\s$/

const regNotD = /^\D$/    // \d 不能匹配的字符
const regNotW = /^\W$/    // \w 不能匹配的字符
const regNotS = /^\S$/    // \s 不能匹配的字符

console.log('"8"匹配数字0-9：', regD.test('8'))
console.log('"a"匹配数字0-9：', regD.test('a'))

console.log('"8"匹配单词字符0-9a-zA-Z：', regW.test('8'))
console.log('"a"匹配单词字符0-9a-zA-Z：', regW.test('a'))
console.log('"-"匹配单词字符0-9a-zA-Z：', regW.test('-'))

console.log('" "匹配空白字符：', regS.test(' '))
console.log('"\\t"匹配空白字符：', regS.test('\t'))
console.log('"\\n"匹配空白字符：', regS.test('\n'))

console.log('"8"匹配\\D：', regNotD.test('8'))
console.log('"a"匹配\\D：', regNotD.test('a'))

console.log('"c"匹配\\W：', regNotW.test('c'))
console.log('"!"匹配\\W：', regNotW.test('!'))


console.log('"\\t"匹配\\S：', regNotS.test('\t'))
console.log('"0"匹配\\S：', regNotS.test('0'))


/**
 * 字符组运算
 *
 *
*/

